name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: Setup and Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: Check PR size
        if: github.event_name == 'pull_request'
        run: |
          LINES_CHANGED=$(git diff --stat origin/${{ github.base_ref }} | tail -n 1 | awk '{print $4}' || echo "0")
          if [ "$LINES_CHANGED" -gt 10000 ]; then
            echo "❌ PR is too large! Contains $LINES_CHANGED lines changed. Maximum allowed is 10000 lines."
            echo "Please split this PR into smaller ones for better review."
            exit 1
          else
            echo "✅ PR size is within limits ($LINES_CHANGED lines changed)"
          fi

      - name: Set up Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (if cache miss)
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Check for vulnerabilities
        run: yarn audit --level high

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (if cache miss)
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Lint code
        run: yarn lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (if cache miss)
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Run tests and generate coverage
        run: yarn test:coverage --passWithNoTests

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (if cache miss)
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Build applications
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 30

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (if cache miss)
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: Verify coverage file exists
        run: |
          ls -la coverage/
          if [ -f "coverage/lcov.info" ]; then
            echo "✅ Coverage file found"
            head -10 coverage/lcov.info
          else
            echo "❌ Coverage file not found"
            exit 1
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [security, lint, test, build, sonarcloud]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Security: ${{ needs.security.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "SonarCloud: ${{ needs.sonarcloud.result }}"

          if [[ "${{ needs.security.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.sonarcloud.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed - One or more jobs failed"
            exit 1
          else
            echo "✅ Quality gate passed - All jobs succeeded"
          fi
